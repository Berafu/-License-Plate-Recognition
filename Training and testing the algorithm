import os
import numpy as np
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense,
Dropout

from google.colab import drive
drive.mount('/content/drive')

IMAGE_SIZE = (64, 64)
BATCH_SIZE = 32
NUM_CLASSES = 1
EPOCHS = 50
TRAIN_DIR = '/content/drive/MyDrive/combined_dataset/train'
VAL_DIR = '/content/drive/MyDrive/combined_dataset/validation'
TEST_DIR = '/content/drive/MyDrive/combined_dataset/test'

def create_model(input_shape, num_classes):
  model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.25),

    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.25),

    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.25),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(num_classes, activation='sigmoid')
  ])
      model.compile(optimizer=Adam(), loss='binary_crossentropy',metrics=['accuracy'])
  return model

num_train_samples = sum(len(files) for _, _, files in os.walk(TRAIN_DIR))
num_val_samples = sum(len(files) for _, _, files in os.walk(VAL_DIR))
steps_per_epoch = num_train_samples // BATCH_SIZE
validation_steps = num_val_samples // BATCH_SIZE

train_datagen = ImageDataGenerator(
  rotation_range=40,
  width_shift_range=0.2,
  height_shift_range=0.2,
  rescale=1./255,
  shear_range=0.2,
  zoom_range=0.2,
  horizontal_flip=True,
  fill_mode='nearest'
)
train_generator = train_datagen.flow_from_directory(
  TRAIN_DIR,
  target_size=IMAGE_SIZE,
  batch_size=BATCH_SIZE,
  class_mode='binary',
  shuffle=True
)

val_datagen = ImageDataGenerator(rescale=1./255)

val_generator = val_datagen.flow_from_directory(
  VAL_DIR,
  target_size=IMAGE_SIZE,
  batch_size=BATCH_SIZE,
  class_mode='binary',
  shuffle=True
)

model = create_model(input_shape=(IMAGE_SIZE[0], IMAGE_SIZE[1], 3),num_classes=NUM_CLASSES)
model.compile(optimizer=Adam(), loss='binary_crossentropy',metrics=['accuracy'])

history = model.fit(
  train_generator,
  steps_per_epoch=steps_per_epoch,
  epochs=EPOCHS,
  validation_data=val_generator,
  validation_steps=validation_steps
)
model.save('/content/drive/MyDrive/license_plate_model.keras'
